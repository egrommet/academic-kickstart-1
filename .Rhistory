blogdown::build_site()
blogdown::build_site()
blogdown::serve_site()
base <- "https://data.police.uk/api/crimes-street"
endpoint <- "/bicycle-theft?"
query <- list(lat = "51.507243",
lon = "-3.190278",
date = "2020-03")
base <- "https://data.police.uk/api/crimes-street"
endpoint <- "/bicycle-theft?"
query <- list(lat = "51.507243",
lon = "-3.190278",
date = "2020-03")
library(httr)
base <- "https://data.police.uk/api/crimes-street"
endpoint <- "/bicycle-theft?"
query <- list(lat = 51.507243,
lon = -3.190278,
date = "2020-03")
library(httr)
cycle_api <- GET(base, endpoint, query)
base <- "https://data.police.uk/api/crimes-street/bicycle-theft?"
query <- list(lat = 51.507243,
lon = -3.190278,
date = "2020-03")
library(httr)
cycle_api <- GET(url = base, query = query)
library(httr)
cycle_api <- GET(url = base, query = query)
str(cycle_api)
?content
response <- content(cycle_api, as = "text", encoding = "UTF-8")
response <- content(cycle_api, as = "text", encoding = "UTF-8")
df <- fromJSON(response, flatten = TRUE) %>%
data.frame()
library(jsonlite)
library(httr)
library(tidyverse)
df <- fromJSON(response, flatten = TRUE) %>%
data.frame()
library(jsonlite)
library(httr)
library(tidyverse)
base <- "https://data.police.uk/api/crimes-street/bicycle-theft?"
query <- list(lat = 51.507243,
lon = -3.190278,
date = "2020-03")
library(httr)
cycle_api <- GET(url = base, query = query)
str(cycle_api)
response <- content(cycle_api, as = "text", encoding = "UTF-8")
df <- fromJSON(response, flatten = TRUE) %>%
data.frame()
library(jsonlite)
library(httr)
library(tidyverse)
base <- "https://data.police.uk/api/crimes-street/bicycle-theft?"
query <- list(lat = 51.507243,
lon = -3.190278,
date = "2020-03")
cycle_api <- GET(url = base, query = ist(lat = 51.507243,
lon = -3.190278,
date = "2020-03"))
cycle_api <- GET(url = base, query = list(lat = 51.507243,
lon = -3.190278,
date = "2020-03"))
cycle_api$status_code
cycle_api <- GET(url = base, query = list(lat = 51.507243,
lon = -3.190278,
date = "2020-02"))
cycle_api$status_code
cycle_api <- GET(url = base, query = list(lat = 51.507243,
lon = -3.190278,
date = "2020-01"))
cycle_api$status_code
path <- "https://data.police.uk/api/crimes-street/burglary?"
cycle_api <- GET(url = path,
query = list(
lat = 53.421813,
lng = -2.330251,
date = "2018-05")
)
cycle_api$status_code
path <- "https://data.police.uk/api/crimes-street/bicycle-theft?"
cycle_api <- GET(url = path,
query = list(
lat = 53.421813,
lng = -2.330251,
date = "2018-05")
)
cycle_api$status_code
cycle_api <- GET(url = path,
query = list(
lat = 53.421813,
lng = -2.330251,
date = "2019-12")
)
cycle_api$status_code
cycle_api <- GET(url = path,
query = list(
lat = 53.421813,
lng = -2.330251,
date = "2020-01")
)
cycle_api$status_code
cycle_api <- GET(url = path,
query = list(
lat = 53.421813,
lng = -2.330251,
date = "2020-02")
)
cycle_api$status_code
cycle_api <- GET(url = path,
query = list(
lat = 53.421813,
lng = -2.330251,
date = "2020-03")
)
cycle_api$status_code
cycle_api <- GET(url = path,
query = list(
lat = 53.421813,
lng = -2.330251,
date = "2020-04")
)
cycle_api$status_code
cycle_api <- GET(url = path,
query = list(
lat = 53.421813,
lng = -2.330251,
date = "2020-03")
)
cycle_api$status_code
response <- content(cycle_api, as = "text", encoding = "UTF-8")
df <- fromJSON(response, flatten = TRUE) %>%
data.frame()
cycle_api <- GET(url = path,
query = list(
lat = 53.421813,
lng = -2.330251,
date = "2020-02")
)
cycle_api$status_code
response <- content(cycle_api, as = "text", encoding = "UTF-8")
library(httr)
library(jsonlite)
library(tidyverse)
path <- "https://data.police.uk/api/crimes-street/burglary?"
request <- GET(url = path,
query = list(
lat = 53.421813,
lng = -2.330251,
date = "2018-05")
)
request$status_code
response <- content(request, as = "text", encoding = "UTF-8")
df <- fromJSON(response, flatten = TRUE) %>%
data.frame()
View(df)
View(query)
request <- GET(url = path,
query = list(
lat = 51.50724,
lng = -3.190278,
date = "2020-01")
)
#Let’s check if the API returned an error. If the request fails the API will return a non-200 status code.
request$status_code
response <- content(request, as = "text", encoding = "UTF-8")
path <- "https://data.police.uk/api/crimes-street/bicycle-theft?"
request <- GET(url = path,
query = list(
lat = 51.50724,
lng = -3.190278,
date = "2020-01")
)
request$status_code
response <- content(request, as = "text", encoding = "UTF-8")
df <- fromJSON(response, flatten = TRUE) %>%
data.frame()
View(df)
ath <- "https://data.police.uk/api/crimes-street/vehicle-crime?"
#Next we need to build our API request and submit it. We will use the GET function from the httr package. First we supply the path to the API endpoint and provide search parameters in the form of a list to the query argument. There are three parameters available to us:
request <- GET(url = path,
query = list(
lat = 51.50724,
lng = -3.190278,
date = "2020-01")
)
#Let’s check if the API returned an error. If the request fails the API will return a non-200 status code.
request$status_code
#Next we parse the content returned from the server as text using the content function.
response <- content(request, as = "text", encoding = "UTF-8")
#Then we’ll parse the JSON content and and convert it to a data frame.
df <- fromJSON(response, flatten = TRUE) %>%
data.frame()
View(df)
path <- "https://data.police.uk/api/crimes-street/vehicle-crime?"
#Next we need to build our API request and submit it. We will use the GET function from the httr package. First we supply the path to the API endpoint and provide search parameters in the form of a list to the query argument. There are three parameters available to us:
request <- GET(url = path,
query = list(
lat = 51.50724,
lng = -3.190278,
date = "2020-01")
)
#Let’s check if the API returned an error. If the request fails the API will return a non-200 status code.
request$status_code
#Next we parse the content returned from the server as text using the content function.
response <- content(request, as = "text", encoding = "UTF-8")
#Then we’ll parse the JSON content and and convert it to a data frame.
df <- fromJSON(response, flatten = TRUE) %>%
data.frame()
View(df)
path <- "https://data.police.uk/api/crimes-street/vehicle-crime?"
#Next we need to build our API request and submit it. We will use the GET function from the httr package. First we supply the path to the API endpoint and provide search parameters in the form of a list to the query argument. There are three parameters available to us:
request <- GET(url = path,
query = list(
lat = 51.50724,
lng = -3.190278,
date = "2020-02")
)
#Let’s check if the API returned an error. If the request fails the API will return a non-200 status code.
request$status_code
#Next we parse the content returned from the server as text using the content function.
response <- content(request, as = "text", encoding = "UTF-8")
#Then we’ll parse the JSON content and and convert it to a data frame.
df <- fromJSON(response, flatten = TRUE) %>%
data.frame()
View(df)
path <- "https://data.police.uk/api/crimes-street/vehicle-crime?"
#Next we need to build our API request and submit it. We will use the GET function from the httr package. First we supply the path to the API endpoint and provide search parameters in the form of a list to the query argument. There are three parameters available to us:
request <- GET(url = path,
query = list(
lat = 51.50724,
lng = -3.190278,
date = "2020-03")
)
#Let’s check if the API returned an error. If the request fails the API will return a non-200 status code.
request$status_code
#Next we parse the content returned from the server as text using the content function.
response <- content(request, as = "text", encoding = "UTF-8")
#Then we’ll parse the JSON content and and convert it to a data frame.
df <- fromJSON(response, flatten = TRUE) %>%
data.frame()
path <- "https://data.police.uk/api/crimes-street/vehicle-crime?"
#Next we need to build our API request and submit it. We will use the GET function from the httr package. First we supply the path to the API endpoint and provide search parameters in the form of a list to the query argument. There are three parameters available to us:
request <- GET(url = path,
query = list(
lat = 51.50724,
lng = -3.190278,
date = "2020-02")
)
#Let’s check if the API returned an error. If the request fails the API will return a non-200 status code.
request$status_code
#Next we parse the content returned from the server as text using the content function.
response <- content(request, as = "text", encoding = "UTF-8")
#Then we’ll parse the JSON content and and convert it to a data frame.
df <- fromJSON(response, flatten = TRUE) %>%
data.frame()
View(df)
library(jsonlite)
library(httr)
library(tidyverse)
url <- "https://data.police.uk/api/crimes-street/vehicle-crime?"
api_call <- GET(url = path,
query = list(
lat = 51.50724,
lng = -3.190278,
date = "2020-02")
)
library(jsonlite)
library(httr)
library(tidyverse)
url <- "https://data.police.uk/api/crimes-street/vehicle-crime?"
api_call <- GET(url = url,
query = list(
lat = 51.50724,
lng = -3.190278,
date = "2020-02")
)
api_call$status_code
response <- content(api_call, as = "text", encoding = "UTF-8")
df <- fromJSON(response, flatten = TRUE) %>%
data.frame()
View(df)
head(response)
head(response, n=4)
head(response, n=3)
head(response)
type(api_call)
class(api_call)
View(df)
vehicle_crimes <- fromJSON(response, flatten = TRUE) %>%
data.frame()
# let's have a look at the structure of the dataframe
str(vehicle_crimes)
vehicle_crimes <- select(vehicle_crimes,
month, category,
location = location.street.name,
long = location.longitude,
lat = location.latitude)
View(vehicle_crimes)
library(httr)
library(jsonlite)
library(tidyverse)
url <- "https://data.police.uk/api/crimes-street/vehicle-crime?"
api_call <- GET(url = url,
query = list(
lat = 51.50724,
lng = -3.190278,
date = "2020-02")
)
api_call$status_code
response <- content(api_call, as = "text", encoding = "UTF-8")
head(response)
vehicle_crimes <- fromJSON(response, flatten = TRUE) %>%
data.frame()
# let's have a look at the structure of the dataframe
str(vehicle_crimes)
vehicle_crimes <- select(vehicle_crimes,
month, category,
location = location.street.name,
long = location.longitude,
lat = location.latitude,
outcome = outcome_status.category)
View(vehicle_crimes)
vehicle_crimes <- vehicle_crimes %>%
mutate(Outcome = recode(outcome,
"Investigation complete; no suspect identified" = "No suspect identified")) %>%
group_by(utcome) %>%
summarise(outcome_count = n()) %>%
arrange(desc(outcome_count))
vehicle_crimes <- vehicle_crimes %>%
mutate(Outcome = recode(outcome,
"Investigation complete; no suspect identified" = "No suspect identified")) %>%
group_by(outcome) %>%
summarise(outcome_count = n()) %>%
arrange(desc(outcome_count))
library(httr)
library(jsonlite)
library(tidyverse)
url <- "https://data.police.uk/api/crimes-street/vehicle-crime?"
api_call <- GET(url = url,
query = list(
lat = 51.50724,
lng = -3.190278,
date = "2020-02")
)
api_call$status_code
response <- content(api_call, as = "text", encoding = "UTF-8")
head(response)
vehicle_crimes <- fromJSON(response, flatten = TRUE) %>%
data.frame()
# let's have a look at the structure of the dataframe
str(vehicle_crimes)
vehicle_crimes <- select(vehicle_crimes,
month, category,
location = location.street.name,
long = location.longitude,
lat = location.latitude,
outcome = outcome_status.category)
outcomes <- vehicle_crimes %>%
mutate(Outcome = recode(outcome,
"Investigation complete; no suspect identified" = "No suspect identified")) %>%
group_by(outcome) %>%
summarise(outcome_count = n()) %>%
arrange(desc(outcome_count))
View(outcomes)
outcomes <- vehicle_crimes %>%
mutate(Outcome = recode(outcome,
"Investigation complete; no suspect identified" = "No suspect identified")) %>%
group_by(outcome) %>%
summarise(outcome_count = n()) %>%
arrange(desc(outcome_count))
View(outcomes)
outcomes <- vehicle_crimes %>%
mutate(outcome = recode(outcome,
"Investigation complete; no suspect identified" = "No suspect identified")) %>%
group_by(outcome) %>%
summarise(outcome_count = n()) %>%
arrange(desc(outcome_count))
View(outcomes)
ggplot(outcomes, aes(outcome_count)) +
geom_bar()
ggplot(outcomes, aes(outcome_count)) +
geom_col()
ggplot(outcomes, aes(outcome_count)) +
geom_bar()
View(outcomes)
ggplot(outcomes, aes(outcome, outcome_count)) +
geom_bar()
ggplot(outcomes, aes(outcome, outcome_count)) +
geom_col()
ggplot(outcomes, aes(x = outcome, y = outcome_count, fill = outcome_count)) +
geom_col()
ggplot(outcomes, aes(x = outcome, y = outcome_count))
ggplot(outcomes, aes(x = outcome, y = outcome_count)) +
geom_col()
servr::daemon_stop(1)
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown
blogdown::serve_site()
servr::daemon_stop(1)
blogdown::serve_site()
run servr::daemon_stop(2)
servr::daemon_stop(2)
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::serve_site()
servr::daemon_stop()
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
